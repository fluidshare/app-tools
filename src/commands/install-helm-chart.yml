description: >
  Install a Helm chart to the configured cluster.

parameters:
  chart:
    description: >
      The name of the chart being installed.
    type: string
  chart-version:
    default: ""
    description: >
      The version of the chart being installed.
    type: string

  release-name:
    default: ""
    description: >
      Then Helm release name. Defaults to the value of CIRCLE_PROJECT_REPONAME.
    type: string
  namespace:
    default: ""
    description: >
      The Kubernetes namespace to use. Defaults to the value of CIRCLE_PROJECT_REPONAME.
    type: string
  image-name:
    default: ""
    description: >
      The name of the image to use. Defaults to the value of CIRCLE_PROJECT_REPONAME.
    type: string
  repo-url:
    default: ""
    description: >
      The repository URL this chart is located at.
    type: string
  values:
    default: ""
    description: >
      A comma delimited list of values files to use. For example:

      ./chart/common.yaml,./charts/stage.yaml
    type: string
  use-gcr:
    default: false
    description: >
      Set to true to automatically create the image.* values.
    type: boolean
  use-branch:
    default: false
    description: >
      Set to true to use the branch name in the release name (will be truncated to 63 characters).
    type: boolean

  gcloud-service-key:
    default: GCLOUD_SERVICE_KEY
    description: >
      The environment variable name containing the service account JSON key.
    type: env_var_name
  google-container-cluster:
    default: GOOGLE_CONTAINER_CLUSTER
    description: >
      The environment varibale name containing the cluster name.
    type: env_var_name
  google-container-region:
    default: GOOGLE_CONTAINER_REGION
    description: >
      The environment variable name containing the container region.
    type: env_var_name
  google-container-registry:
    default: gcr.io
    description: >
      The container registry to use.
    type: string
  google-container-registry-project-id:
    default: GOOGLE_CONTAINER_REGISTRY_PROJECT_ID
    description: >
      The environment variable name containing the container registry project ID.
    type: env_var_name
  google-project-id:
    default: GOOGLE_PROJECT_ID
    description: >
      The environment variable name containing the project ID.
    type: env_var_name

steps:
  - authenticate-gke:
      google-container-cluster: << parameters.google-container-cluster >>
      google-container-region: << parameters.google-container-region >>
      google-project-id: << parameters.google-project-id >>
      gcloud-service-key: << parameters.gcloud-service-key >>

  - jq/install
  - install-helm-client

  - when:
      condition: << parameters.repo-url >>
      steps:
        - run:
            name: Add custom helm repo.
            command: |-
              IFS="/" read -ra REPO \<<< "<< parameters.chart >>"
              helm repo add "${REPO[0]}" "<< parameters.repo-url >>"

  - run:
      name: Install Helm Chart
      command: |-
        HELM_OUTPUT="helm upgrade"

        CHART="<< parameters.chart >>"
        CHART_VERSION="<< parameters.chart-version >>"
        RELEASE_NAME="<< parameters.release-name >>"
        NAMESPACE="<< parameters.namespace >>"
        IMAGE_NAME=<< parameters.image-name >>
        VALUES="<< parameters.values >>"
        USE_BRANCH="<< parameters.use-branch >>"

        if [ -z "${RELEASE_NAME}" ]; then
          RELEASE_NAME="${CIRCLE_PROJECT_REPONAME}"
        fi

        if [ -z "${NAMESPACE}" ]; then
          NAMESPACE="${CIRCLE_PROJECT_REPONAME}"
        fi

        HELM_OUTPUT="${HELM_OUTPUT} ${RELEASE_NAME} ${CHART} \\\n"
        HELM_OUTPUT="${HELM_OUTPUT}  --create-namespace \\\n"
        HELM_OUTPUT="${HELM_OUTPUT}  --install \\\n"
        HELM_OUTPUT="${HELM_OUTPUT}  --atomic \\\n"

        if [ ! -z "${CIRCLE_PULL_REQUEST}" ] || [[ "${USE_BRANCH}" == "true" ]]; then
          NAMESPACE=$(echo "${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BRANCH}" | iconv -c -t ascii//TRANSLIT | sed -r 's/[~\^]+//g' | sed -r 's/[^a-zA-Z0-9]+/-/g' | sed -r 's/^-+\|-+$//g' | tr A-Z a-z | cut -c 1-63)
          set -- "$@" --set githubUsername="${CIRCLE_USERNAME}"

          HELM_OUTPUT="${HELM_OUTPUT}  --namespace ${NAMESPACE} \\\n"
          HELM_OUTPUT="${HELM_OUTPUT}  --set githubUsername=\"${NAMESPACE}\" \\\n"
        else
          HELM_OUTPUT="${HELM_OUTPUT}  --namespace ${NAMESPACE} \\\n"
        fi

        if [ -n "${CHART_VERSION}" ]; then
          set -- "$@" --version "${CHART_VERSION}"
          HELM_OUTPUT="${HELM_OUTPUT}  --version ${CHART_VERSION} \\\n"
        fi

        USE_GCR="<< parameters.use-gcr >>"
        if [ "${USE_GCR}" == "true" ]; then
          IMAGE_REGISTRY="<< parameters.google-container-registry >>"
          IMAGE_REPO="${<< parameters.google-container-registry-project-id >>}/<< parameters.image-name >>"
          IMAGE_TAG="${CIRCLE_SHA1:0:7}"

          set -- "$@" --set image.registry="${IMAGE_REGISTRY}"
          set -- "$@" --set image.repository="${IMAGE_REPO}"
          set -- "$@" --set image.tag="${IMAGE_TAG}"

          HELM_OUTPUT="${HELM_OUTPUT}  --set image.registry=\"${IMAGE_REGISTRY}\" \\\n"
          HELM_OUTPUT="${HELM_OUTPUT}  --set image.repository=\"${IMAGE_REPO}\" \\\n"
          HELM_OUTPUT="${HELM_OUTPUT}  --set image.tag=\"${IMAGE_TAG}\" \\\n"
        fi

        if [ -n "${VALUES}" ]; then
          SPLIT_VALUES=($(echo ${VALUES} | tr "," "\n"))
          for i in "${SPLIT_VALUES[@]}"; do
            set -- "$@" -f "${i}"
            HELM_OUTPUT="${HELM_OUTPUT}  -f "${i}" \\\n"
          done
        fi

        echo "Running Helm:"
        echo $HELM_OUTPUT

        helm upgrade $RELEASE_NAME $CHART \
          --namespace "${NAMESPACE}" \
          --create-namespace \
          --install \
          --atomic \
          "$@"
